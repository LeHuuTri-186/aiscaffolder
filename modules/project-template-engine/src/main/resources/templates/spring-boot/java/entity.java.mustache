package {{packageName}}.domain;

{{#lombokEnabled}}
import lombok.Data;
import lombok.Builder;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
{{/lombokEnabled}}
{{#hibernateEnabled}}
import jakarta.persistence.*;
{{/hibernateEnabled}}
import java.util.*;

{{#lombokEnabled}}
@Data
@AllArgsConstructor
@NoArgsConstructor
@Builder
{{/lombokEnabled}}
{{#hibernateEnabled}}
@Entity
@Table(name="{{nameLower}}s")
{{/hibernateEnabled}}
{{#couchbase}}
@Document
{{/couchbase}}
{{#cassandra}}
@Table("{{nameLower}}s")
{{/cassandra}}
{{#mongodb}}
@Document(collection = "{{nameLower}}s")
{{/mongodb}}
public class {{name}} {
{{#hibernateEnabled}}
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
{{/hibernateEnabled}}
    private {{idFieldType}} {{idFieldName}};
{{#fields}}
    private {{fieldType}} {{fieldName}};
{{/fields}}
{{#relationships}}
    {{#isSourceClass}}
    {{#isManyToOne}}
    {{#hibernateEnabled}}
    @ManyToOne
    {{/hibernateEnabled}}
    private {{targetClass}} {{targetClassLower}};
    {{/isManyToOne}}
    {{#isOneToOne}}
    {{#hibernateEnabled}}
    @OneToOne({{#isBidirectional}}mappedBy="{{nameLower}}", {{/isBidirectional}}cascade = CascadeType.ALL)
    {{/hibernateEnabled}}
    private {{targetClass}} {{targetClassLower}};
    {{/isOneToOne}}
    {{#isOneToMany}}
    {{#hibernateEnabled}}
    @OneToMany({{#isBidirectional}}mappedBy="{{nameLower}}", {{/isBidirectional}}cascade = CascadeType.ALL)
    {{/hibernateEnabled}}
    private List<{{targetClass}}> {{targetClassLower}}s;
    {{/isOneToMany}}
    {{#isManyToMany}}
    @ManyToMany({{#isBirectional}}mappedBy="{{nameLower}}s", {{/isBirectional}}cascade = CascadeType.ALL)
    @JoinTable(
    name = "{{nameLower}}_{{targetClassLower}}",
    joinColumns = @JoinColumn(name = "{{nameLower}}_id"),
    inverseJoinColumns = @JoinColumn(name = "{{targetClassLower}}_id")
    )
    private List<{{targetClass}}> {{targetClassLower}}s;
    {{/isManyToMany}}
    {{/isSourceClass}}
    {{#isBidirectional}}
    {{#isTargetClass}}
    {{#isManyToOne}}
    {{#hibernateEnabled}}
    @OneToMany({{#isBidirectional}}mappedBy="{{nameLower}}", {{/isBidirectional}}cascade = CascadeType.ALL)
    private List<{{sourceClass}}> {{sourceClassLower}}s;
    {{/hibernateEnabled}}
    {{/isManyToOne}}
    {{#isOneToOne}}
    {{#hibernateEnabled}}
    @OneToOne
    {{/hibernateEnabled}}
    private {{sourceClass}} {{sourceClassLower}};
    {{/isOneToOne}}
    {{#isOneToMany}}
    @ManyToOne
    private {{sourceClass}} {{sourceClassLower}};
    {{/isOneToMany}}
    {{#isManyToMany}}
    @ManyToMany(cascade = CascadeType.ALL)
    private List<{{sourceClass}}> {{sourceClassLower}}s;
    {{/isManyToMany}}
    {{/isTargetClass}}
    {{/isBidirectional}}
{{/relationships}}
{{^lombokEnabled}}

    public {{name}}() {}

    {{#hasField}}
    public {{name}}({{idFieldType}} {{idFieldName}}, {{#fields}}{{fieldType}} {{fieldName}}{{^isLastField}}, {{/isLastField}}{{/fields}}) {
        this.{{idFieldName}} = {{idFieldName}};
        {{#fields}}
        this.{{fieldName}} = {{fieldName}};
        {{/fields}}
    }
    {{/hasField}}

    public {{idFieldType}} get{{idFieldNameUpper}}() {
        return {{idFieldName}};
    }

    public void set{{idFieldNameUpper}}({{idFieldType}} {{idFieldName}}) {
        this.{{idFieldName}} = {{idFieldName}};
    }
{{/lombokEnabled}}
{{^lombokEnabled}}
{{#relationships}}
{{#isSourceClass}}
    {{#isManyToOne}}

    public {{targetClass}} get{{targetClass}}() {
        return {{targetClassLower}};
    }

    public void set{{targetClass}}({{targetClass}} {{targetClassLower}}) {
        this.{{targetClassLower}} = {{targetClassLower}};
    }
    {{/isManyToOne}}
    {{#isOneToOne}}

    public {{targetClass}} get{{targetClass}}() {
        return {{targetClassLower}};
    }

    public void set{{targetClass}}({{targetClass}} {{targetClassLower}}) {
        this.{{targetClassLower}} = {{targetClassLower}};
    }
    {{/isOneToOne}}
    {{#isOneToMany}}

    public List<{{targetClass}}> get{{targetClass}}s() {
        return {{targetClassLower}}s;
    }

    public void set{{targetClass}}s(List<{{targetClass}}> {{targetClassLower}}s) {
        this.{{targetClassLower}}s = {{targetClassLower}}s;
    }
    {{/isOneToMany}}
    {{#isManyToMany}}

    public List<{{targetClass}}> get{{targetClass}}s() {
        return {{targetClassLower}}s;
    }

    public void set{{targetClass}}s(List<{{targetClass}}> {{targetClassLower}}s) {
        this.{{targetClassLower}}s = {{targetClassLower}}s;
    }
    {{/isManyToMany}}
{{/isSourceClass}}
{{#isBidirectional}}
{{#isTargetClass}}
    {{#isManyToOne}}

    public List<{{sourceClass}}> get{{sourceClass}}s() {
        return {{sourceClassLower}}s;
    }

    public void set{{sourceClass}}s(List<{{sourceClass}}> {{sourceClassLower}}s) {
        this.{{sourceClassLower}}s = {{sourceClassLower}}s;
    }
    {{/isManyToOne}}
    {{#isOneToOne}}

    public {{sourceClass}} get{{sourceClass}}() {
        return {{sourceClassLower}};
    }

    public void set{{sourceClass}}({{sourceClass}} {{sourceClassLower}}) {
        this.{{sourceClassLower}} = {{sourceClassLower}};
    }
    {{/isOneToOne}}
    {{#isOneToMany}}

    public {{sourceClass}} get{{sourceClass}}() {
        return {{sourceClassLower}};
    }

    public void set{{sourceClass}}({{sourceClass}} {{sourceClassLower}}) {
        this.{{sourceClassLower}} = {{sourceClassLower}};
    }
    {{/isOneToMany}}
    {{#isManyToMany}}
    public List<{{sourceClass}}> get{{sourceClass}}s() {
        return {{sourceClassLower}}s;
    }

    public void set{{sourceClass}}s(List<{{sourceClass}}> {{sourceClassLower}}s) {
        this.{{sourceClassLower}}s = {{sourceClassLower}}s;
    }
    {{/isManyToMany}}
{{/isTargetClass}}
{{/isBidirectional}}
{{/relationships}}
    {{#fields}}

    public {{fieldType}} get{{fieldNameUpper}}() {
        return {{fieldName}};
    }

    public void set{{fieldNameUpper}}({{fieldType}} {{fieldName}}) {
        this.{{fieldName}} = {{fieldName}};
    }
    {{/fields}}
{{/lombokEnabled}}
}